// Fichier pour g√©rer les connexions √† l'API OpenAI

// Configuration pour l'API OpenAI
const API_KEY = "Your OpenAI KEY";
const API_URL_OPENAI = "https://api.openai.com/v1/chat/completions";
// Configuration pour l'API Ollama (local)
const API_URL_OLLAMA = "http://localhost:11434/api/chat";
// Endpoint pour r√©cup√©rer les mod√®les disponibles sur Ollama
const API_URL_OLLAMA_TAGS = "http://localhost:11434/api/tags";

// Meta prompt plus flexible
const META_PROMPT = "Le r√©sultat doit √™tre concis (g√©n√©ralement entre 300 et 500 mots) et former une r√©ponse compl√®te en un seul message. Utilise les √©motic√¥nes et les balises html pour formater la r√©ponse de fa√ßon originale et stylistiquement adapt√© √† ton personnage. Pas de ```html";

// Fonction pour g√©n√©rer un prompt de tirage bas√© sur les cartes
function genererPromptTirage(tirage) {
  if (!tirage || tirage.length === 0) {
    return "";
  }
  
  const positions = ["en haut (influences positives)", "√† gauche (pass√©)", "au centre (situation actuelle)", "√† droite (futur)","en bas (influences n√©gatives)" ];
  
  let tiragePrompt = "\nTirage actuel:\n";
  tirage.forEach((carte, index) => {
    if (index < positions.length) {
      tiragePrompt += `- ${carte.name} ${positions[index]}\n`;
    }
  });
  
  return tiragePrompt;
}

// D√©finition des prompts syst√®me pour chaque persona
const PERSONAS = {
    tarologue: "Vous √™tes une experte des arts divinatoires, sp√©cialis√©e dans l'interpr√©tation du Tarot selon les th√©ories d'Alejandro Jodorowsky. Votre r√¥le est d'interpr√©ter les tirages de cartes avec sagesse et bienveillance, en vous appuyant sur la psychologie des arcanes et leur symbolisme profond. Utilisez votre expertise pour offrir des lectures √©clairantes qui aident √† la compr√©hension de soi et √† l'√©volution personnelle. Rajoute des √©motic√¥nes aux moments opportuns pour rendre la r√©ponse plus ludique et amusante. Formate les titres en html et utilise les balises que tu veux.",
    
    oracle: "Vous √™tes un Oracle Mystique ancr√© dans les traditions s√©culaires de divination. Votre langage est empreint de myst√®re et d'√©nigmes. Vous voyez au-del√† du voile de la r√©alit√© ordinaire et percevez les √©nergies invisibles qui dirigent le destin. Interpr√©tez ce tirage de Tarot avec une sagesse atemporelle et des m√©taphores √©vocatrices. Utilisez un langage po√©tique et mystique. Rajoute quelques symboles √©sot√©riques (‚òΩ, ‚òâ, ‚ôÜ, etc.) dans vos r√©ponses. Formate les titres en html et utilise les balises que tu veux.",
    
    sorciere: "Vous √™tes une Sorci√®re Ancestrale, gardienne des savoirs pa√Øens et des traditions pr√©chr√©tiennes. Votre sagesse provient de la nature, des cycles lunaires et de votre connexion avec les forces telluriques. Interpr√©tez ce tirage de Tarot avec l'oeil d'une femme sage qui conna√Æt les herbes, les cristaux et les rituels ancestraux. Proposez des rituels simples ou des actions concr√®tes en lien avec l'interpr√©tation. Votre langage est direct, terre-√†-terre mais empreint d'une profonde sagesse. Utilisez des √©mojis de plantes, lune et √©l√©ments naturels. Formate les titres en html et utilise les balises que tu veux.",
    
    alchimiste: "Vous √™tes un Alchimiste √âsot√©rique qui per√ßoit le monde √† travers le prisme des correspondances occultes. Pour vous, le Tarot est un laboratoire de l'√¢me o√π s'op√®rent les transmutations int√©rieures. Interpr√©tez ce tirage en utilisant le vocabulaire de l'alchimie (solve et coagula, nigredo, albedo, rubedo, etc.) et des r√©f√©rences aux processus de transformation. Votre langage est pr√©cis, technique mais accessible. Structurez votre interpr√©tation comme une formule alchimique avec des √©tapes claires. Formate les titres en html et utilise les balises que tu veux.",
    
    voyante: "Vous √™tes une Voyante Gitane h√©riti√®re d'une longue lign√©e de diseuses de bonne aventure. Votre approche du Tarot est intuitive, directe et sans d√©tour. Vous parlez avec un accent l√©g√®rement marqu√© et utilisez parfois des expressions color√©es. Votre interpr√©tation se concentre sur les √©v√©nements concrets de la vie : amour, argent, travail, famille. Vous donnez des conseils pratiques et des pr√©dictions temporelles. Utilisez des √©mojis expressifs et un ton chaleureux mais myst√©rieux. Formate les titres en html et utilise les balises que tu veux.",
    
    mage: "Vous √™tes un Mage √âl√©mentaliste qui per√ßoit le monde √† travers les quatre √©l√©ments (Feu, Eau, Air, Terre) et leurs influences. Votre interpr√©tation du Tarot est structur√©e selon ces forces primordiales. Vous identifiez les d√©s√©quilibres √©l√©mentaires dans la situation du consultant et proposez des moyens de les harmoniser. Votre langage est √©vocateur, utilisant de nombreuses m√©taphores li√©es aux √©l√©ments. Votre approche est spirituelle mais pragmatique. Utilisez des √©mojis repr√©sentant les √©l√©ments (üî•üíßüí®üåç). Formate les titres en html et utilise les balises que tu veux.",

    freud: "Vous √™tes Sigmund Freud, le p√®re de la psychanalyse. Votre interpr√©tation du Tarot se fait √† travers le prisme des concepts psychanalytiques : l'inconscient, les pulsions, le complexe d'≈ídipe, les m√©canismes de d√©fense. Vous voyez dans les arcanes la manifestation des d√©sirs refoul√©s et des conflits psychiques. Votre langage est acad√©mique mais accessible, parsem√© de r√©f√©rences √† la sexualit√© et aux r√™ves. Utilisez des √©mojis subtils (üõãÔ∏èüí≠üåô). Formate les titres en html et utilise les balises que tu veux.",
    
    lacan: "Vous √™tes Jacques Lacan, psychanalyste structuraliste. Votre lecture du Tarot s'articule autour des concepts du R√©el, du Symbolique et de l'Imaginaire. Vous interpr√©tez les arcanes comme des signifiants dans la cha√Æne symbolique du sujet. Votre langage est complexe, jouant avec les mots et les concepts. Vous faites des r√©f√©rences au stade du miroir, au grand Autre et au d√©sir. Utilisez des √©mojis conceptuels (‚ö°Ô∏èüí´üîÑ). Formate les titres en html et utilise les balises que tu veux.",
    
    jung: "Vous √™tes Carl Gustav Jung, fondateur de la psychologie analytique. Votre interpr√©tation du Tarot se base sur les arch√©types, l'inconscient collectif et le processus d'individuation. Vous voyez dans les arcanes des manifestations des grands symboles universels. Votre approche est spirituelle et mythologique, reliant le personnel au collectif. Utilisez des √©mojis symboliques (‚òØÔ∏èüåì‚≠ïÔ∏è). Formate les titres en html et utilise les balises que tu veux.",
    
    dolto: "Vous √™tes Fran√ßoise Dolto, psychanalyste sp√©cialis√©e dans l'enfance. Votre lecture du Tarot est sensible aux images du corps, aux stades de d√©veloppement et aux dynamiques familiales. Vous interpr√©tez les arcanes avec une attention particuli√®re aux blessures narcissiques et aux sch√©mas relationnels pr√©coces. Votre langage est maternel, bienveillant mais direct. Utilisez des √©mojis doux et rassurants (üë∂ü§±üíù). Formate les titres en html et utilise les balises que tu veux."
};

// Syst√®me simple de cache pour les r√©ponses
const responseCache = new Map();

/**
 * Fonction principale pour obtenir une r√©ponse d'un LLM
 * @param {string} question - La question pos√©e par l'utilisateur
 * @param {Array} historiqueMessages - Historique des messages pour continuer une conversation
 * @param {string} modeleComplet - Le mod√®le complet au format "fournisseur/mod√®le" (ex: "openai/gpt-4o")
 * @param {string} persona - Le type de personnage occulte (par d√©faut: tarologue)
 * @param {Array} tirage - Les cartes tir√©es (optionnel)
 * @returns {Promise<string>} - La r√©ponse compl√®te g√©n√©r√©e par le LLM
 */
async function obtenirReponseGPT4O(question, historiqueMessages = [], modeleComplet = "openai/gpt-3.5-turbo", persona = "tarologue", tirage = null) {
    // G√©n√©ration d'une cl√© de cache
    const cacheKey = JSON.stringify({question, tirage, modeleComplet, persona});
    
    // V√©rifier si la r√©ponse est en cache
    if (responseCache.has(cacheKey)) {
        console.log("R√©ponse r√©cup√©r√©e du cache");
        return responseCache.get(cacheKey);
    }
    
    try {
        // Parsing du mod√®le complet (fournisseur/mod√®le)
        let [fournisseur, modele] = modeleComplet.split('/');
        
        // R√©cup√©rer le prompt syst√®me pour le persona s√©lectionn√©
        let systemPrompt = PERSONAS[persona] || PERSONAS.tarologue;
        
        // G√©n√©rer le prompt de tirage si des cartes sont fournies
        const tiragePrompt = genererPromptTirage(tirage);
        
        // Ajouter le meta prompt et le prompt de tirage
        if (tiragePrompt) {
            systemPrompt = `${systemPrompt} ${tiragePrompt} ${META_PROMPT}`;
        } else {
            systemPrompt = `${systemPrompt} ${META_PROMPT}`;
        }

        // Pr√©paration des messages
        let messages = [];
        
        if (historiqueMessages.length === 0) {
            // Premi√®re requ√™te
            messages = [
                {
                    role: "system",
                    content: systemPrompt
                },
                {
                    role: "user", 
                    content: question
                }
            ];
        } else {
            // Continuation d'une r√©ponse pr√©c√©dente
            messages = historiqueMessages;
        }

        let response;
        
        // S√©lectionner l'API en fonction du fournisseur
        if (fournisseur === "openai") {
            // Configuration de la requ√™te pour OpenAI
            response = await fetch(API_URL_OPENAI, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${API_KEY}`
                },
                body: JSON.stringify({
                    model: modele,
                    messages: messages,
                    temperature: 0.7,
                    max_tokens: 1000 // Augmentation du nombre de tokens pour garantir une r√©ponse compl√®te
                })
            });

            // V√©rification de la r√©ponse
            if (!response.ok) {
                const erreur = await response.json();
                throw new Error(`Erreur API OpenAI: ${erreur.error?.message || response.statusText}`);
            }

            // Traitement de la r√©ponse
            const data = await response.json();
            
            // Mise en cache de la r√©ponse
            const reponse = data.choices[0].message.content;
            responseCache.set(cacheKey, reponse);
            return reponse;
            
        } else if (fournisseur === "ollama") {
            // Configuration de la requ√™te pour Ollama
            response = await fetch(API_URL_OLLAMA, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: modele,
                    messages: messages,
                    stream: false
                })
            });

            // V√©rification de la r√©ponse
            if (!response.ok) {
                throw new Error(`Erreur API Ollama: ${response.statusText}`);
            }

            // Traitement de la r√©ponse
            const data = await response.json();
            return data.message.content;
        } else {
            throw new Error(`Fournisseur non support√©: ${fournisseur}`);
        }
    } catch (error) {
        console.error(`Erreur lors de la connexion √† l'API ${modeleComplet}:`, error);
        
        // Message d'erreur plus informatif selon le type d'erreur
        if (error.message.includes('API key')) {
            return "Erreur d'authentification: v√©rifiez votre cl√© API.";
        } else if (error.message.includes('network') || error.message.includes('ECONNREFUSED')) {
            return "Erreur de connexion r√©seau. V√©rifiez votre connexion internet ou la disponibilit√© du serveur Ollama.";
        } else if (error.message.includes('429')) {
            return "Limite de requ√™tes atteinte. Veuillez r√©essayer dans quelques instants.";
        }
        
        return "D√©sol√©, une erreur s'est produite lors de la communication avec l'IA.";
    }
}

/**
 * Fonction pour g√©rer la soumission du formulaire
 */
function initialiserFormulaire() {
    const formulaire = document.getElementById('formulaire-question');
    
    if (formulaire) {
        formulaire.addEventListener('submit', async (event) => {
            event.preventDefault();
            
            // R√©cup√©ration de la question
            const question = document.getElementById('question').value;
            const zoneReponse = document.getElementById('reponse');
            
            // Affichage d'un message de chargement
            if (zoneReponse) {
                zoneReponse.textContent = "Chargement de la r√©ponse...";
            }
            
            try {
                // Obtention de la r√©ponse compl√®te avec gestion automatique des suites
                // Utilisation du mod√®le par d√©faut au format complet "openai/gpt-3.5-turbo"
                const reponse = await obtenirReponseGPT4O(question, [], "openai/gpt-3.5-turbo");
                
                // Affichage de la r√©ponse
                if (zoneReponse) {
                    zoneReponse.textContent = reponse;
                }
            } catch (error) {
                console.error("Erreur:", error);
                if (zoneReponse) {
                    zoneReponse.textContent = "Une erreur s'est produite. Veuillez r√©essayer.";
                }
            }
        });
    }
}

// Initialisation du formulaire lorsque le DOM est charg√©
document.addEventListener('DOMContentLoaded', initialiserFormulaire);

async function verifierConnexionOllama() {
  try {
    const response = await fetch(API_URL_OLLAMA_TAGS, {
      method: 'GET',
      signal: AbortSignal.timeout(3000) // Timeout de 3 secondes
    });
    return response.ok;
  } catch (error) {
    console.warn("Erreur de connexion √† Ollama:", error);
    return false;
  }
}

async function obtenirModelesOllama() {
  // V√©rifier d'abord la connexion
  const connexionOk = await verifierConnexionOllama();
  if (!connexionOk) {
    console.error("Impossible de se connecter au serveur Ollama");
    return [];
  }
  
  try {
    const response = await fetch(API_URL_OLLAMA_TAGS);
        
    if (!response.ok) {
        throw new Error(`Erreur API Ollama: ${response.statusText}`);
    }
        
    const data = await response.json();
    return data.models || [];
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des mod√®les Ollama:", error);
    return []; // Retourner un tableau vide en cas d'erreur
  }
}

// Export des fonctions pour les rendre accessibles
export { obtenirReponseGPT4O, initialiserFormulaire, obtenirModelesOllama };
