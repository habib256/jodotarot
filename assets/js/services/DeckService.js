/**
 * Service pour charger et g√©rer les diff√©rents jeux de cartes
 */
import Deck from '../models/cards/Deck.js';
import { TarotCard, ARCANE_TYPES, MINOR_SUITS, MINOR_RANKS } from '../models/cards/index.js';
import { getTranslation } from '../translations/index.js';

class DeckService {
  constructor() {
    this.decks = {}; // Cache des jeux charg√©s
    this.currentDeckId = null;
    
    // D√©finition des jeux disponibles
    this.availableDecks = {
      'set01': {
        id: 'set01',
        name: 'Marseille',
        path: 'assets/images/cards/marseille',
        majorCount: 22,
        minorCount: 56,
        supportsMinor: false
      },
      'set02': {
        id: 'set02',
        name: 'Lehmann',
        path: 'assets/images/cards/lehmann',
        majorCount: 22,
        minorCount: 56,
        supportsMinor: false
      },
      'set03': {
        id: 'set03',
        name: 'Renaissance',
        path: 'assets/images/cards/renaissance',
        majorCount: 22,
        minorCount: 0,
        supportsMinor: false
      },
      'set04': {
        id: 'set04',
        name: 'Rick & Morty',
        path: 'assets/images/cards/rick&morty',
        majorCount: 16,
        minorCount: 0,
        supportsMinor: false
      }
    };
  }
  
  /**
   * V√©rifie si un jeu de cartes est d√©j√† charg√©
   * @param {string} deckId - Identifiant du jeu
   * @returns {boolean} True si le jeu est charg√©
   */
  isDeckLoaded(deckId) {
    return !!this.decks[deckId];
  }
  
  /**
   * Obtient la liste des jeux disponibles
   * @returns {Array} Liste des jeux disponibles
   */
  getAvailableDecks() {
    return Object.values(this.availableDecks);
  }
  
  /**
   * Charge un jeu de cartes sp√©cifique
   * @param {string} deckId - Identifiant du jeu √† charger
   * @returns {Promise<Deck>} Le jeu de cartes charg√©
   */
  async loadDeck(deckId) {
    console.log(`üîÑ D√©but du chargement du jeu ${deckId}`);
    
    if (this.isDeckLoaded(deckId)) {
      return this.decks[deckId];
    }

    const deckInfo = this.availableDecks[deckId];
    if (!deckInfo) {
      console.error(`‚ùå Jeu ${deckId} non trouv√© dans les jeux disponibles`);
      throw new Error(`Jeu ${deckId} non trouv√©`);
    }

    console.log(`üìä Informations sur le jeu ${deckId}:`, deckInfo);

    try {
      // Charger les cartes majeures
      const majorCards = await this.fetchMajorCards(deckId);
      console.log(`üé¥ Cartes majeures charg√©es pour ${deckId}:`, majorCards);
      
      // Cr√©er le jeu
      const deck = new Deck(deckId, majorCards);
      this.decks[deckId] = deck;
      this.currentDeckId = deckId;

      // V√©rifier que toutes les images sont accessibles
      console.log(`üîç V√©rification des images pour le jeu ${deckId}...`);
      for (const card of majorCards) {
        try {
          console.log(`üñºÔ∏è Tentative de chargement de l'image: ${card.image}`);
          const response = await fetch(card.image);
          if (!response.ok) {
            throw new Error(`Image non trouv√©e: ${card.image}`);
          }
          console.log(`‚úÖ Image charg√©e avec succ√®s: ${card.image}`);
        } catch (error) {
          console.error(`‚ùå Erreur lors du chargement de l'image ${card.image}:`, error);
          throw new Error(`Impossible de charger l'image de la carte ${card.name}`);
        }
      }

      console.log(`‚úÖ Jeu ${deckId} charg√© avec succ√®s`);
      return deck;
    } catch (error) {
      console.error(`‚ùå Erreur lors du chargement du jeu ${deckId}:`, error);
      throw new Error(`√âchec du chargement du jeu ${deckId}: ${error.message}`);
    }
  }
  
  /**
   * R√©cup√®re les cartes majeures pour un jeu donn√©
   * @param {string} deckId - L'identifiant du jeu
   * @returns {Promise<TarotCard[]>} Les cartes majeures
   */
  async fetchMajorCards(deckId) {
    const game = this.availableDecks[deckId];
    if (!game) {
      throw new Error(`Jeu non trouv√©: ${deckId}`);
    }

    const cards = [];
    for (let i = 0; i < game.majorCount; i++) {
      const fileName = this.generateFileName(deckId, i);
      const imagePath = `${game.path}/${fileName}`;
      const card = new TarotCard(
        `M${String(i).padStart(2, '0')}`,
        this.getMajorCardName(i, deckId),
        imagePath
      );
      cards.push(card);
    }

    // Ajouter le dos de carte
    const backFileName = this.generateFileName(deckId, game.majorCount);
    const backImagePath = `${game.path}/${backFileName}`;
    const backCard = new TarotCard(
      `M${String(game.majorCount).padStart(2, '0')}`,
      'back',
      backImagePath
    );
    cards.push(backCard);

    return cards;
  }
  
  /**
   * Charge les arcanes mineurs d'un jeu
   * @param {string} deckId - Identifiant du jeu
   * @returns {Promise<Array>} Liste des cartes mineures
   */
  async fetchMinorCards(deckId) {
    const deckInfo = this.availableDecks[deckId];
    const cards = [];

    // Charger les 56 arcanes mineurs
    for (const suit of Object.values(MINOR_SUITS)) {
      for (const rank of Object.values(MINOR_RANKS)) {
        const fileName = TarotCard.generateFileName(ARCANE_TYPES.MINOR, suit, rank);
        const imagePath = `${deckInfo.path}/minor/${fileName}.${deckId === 'set02' ? 'jpg' : 'png'}`;
        
        cards.push(new TarotCard(
          TarotCard.generateId(ARCANE_TYPES.MINOR, suit, rank),
          `${rank} of ${suit}`,
          imagePath,
          ARCANE_TYPES.MINOR,
          suit,
          rank
        ));
      }
    }

    return cards;
  }
  
  /**
   * Obtient le nom d'un arcane majeur par son num√©ro
   * @param {number} number - Num√©ro de l'arcane
   * @param {string} deckId - Identifiant du jeu
   * @returns {string} Nom de l'arcane
   */
  getMajorCardName(number, deckId) {
    const deckInfo = this.availableDecks[deckId];
    if (!deckInfo) {
      throw new Error(`Jeu non trouv√©: ${deckId}`);
    }

    // Mapping des noms de fichiers pour chaque jeu
    const cardNames = {
      'set01': { // Marseille
        0: 'Le_fou',
        1: 'Bateleur',
        2: 'Papesse',
        3: 'Imperatrice',
        4: 'Empereur',
        5: 'Pape',
        6: 'Les_amoureux',
        7: 'Chariot',
        8: 'Justice',
        9: 'Ermite',
        10: 'La_roue',
        11: 'Force',
        12: 'Le_pendu',
        13: 'La_mort',
        14: 'Temperance',
        15: 'Diable',
        16: 'La_Tour',
        17: 'Etoile',
        18: 'La_lune',
        19: 'Le_soleil',
        20: 'Le_jugement',
        21: 'Le_monde',
        22: 'Dos_de_carte'
      },
      'set02': { // Lehmann
        0: 'Le_fou',
        1: 'Bateleur',
        2: 'Papesse',
        3: 'Imperatrice',
        4: 'Empereur',
        5: 'Pape',
        6: 'Les_amoureux',
        7: 'Chariot',
        8: 'Justice',
        9: 'Ermite',
        10: 'La_roue',
        11: 'Force',
        12: 'Le_pendu',
        13: 'La_mort',
        14: 'Temperance',
        15: 'Diable',
        16: 'La_Tour',
        17: 'Etoile',
        18: 'La_lune',
        19: 'Le_soleil',
        20: 'Le_jugement',
        21: 'Le_monde',
        22: 'Dos_de_carte'
      },
      'set03': { // Renaissance
        0: 'Le_fou',
        1: 'Bateleur',
        2: 'Papesse',
        3: 'Imperatrice',
        4: 'Empereur',
        5: 'Pape',
        6: 'Les_amoureux',
        7: 'Chariot',
        8: 'Justice',
        9: 'Ermite',
        10: 'La_roue',
        11: 'Force',
        12: 'Le_pendu',
        13: 'La_mort',
        14: 'Temperance',
        15: 'Diable',
        16: 'La_Tour',
        17: 'Etoile',
        18: 'La_lune',
        19: 'Le_soleil',
        20: 'Le_jugement',
        21: 'Le_monde',
        22: 'Dos_de_carte'
      },
      'set04': { // Rick & Morty
        0: 'Le_fou',
        1: 'Bateleur',
        2: 'Papesse',
        3: 'Imperatrice',
        4: 'Empereur',
        5: 'Pape',
        6: 'Les_amoureux',
        7: 'Chariot',
        8: 'Justice',
        9: 'Ermite',
        10: 'La_roue',
        11: 'Force',
        12: 'Le_pendu',
        13: 'La_mort',
        14: 'Temperance',
        15: 'Diable',
        16: 'La_Tour'
      }
    };

    return cardNames[deckId]?.[number] || `arcane_${number}`;
  }
  
  /**
   * Obtient la liste des jeux disponibles
   * @return {Array} Liste des jeux disponibles
   */
  getAvailableDecks() {
    return Object.values(this.availableDecks);
  }
  
  /**
   * Obtient le jeu de cartes actuellement s√©lectionn√©
   * @return {Deck|null} Le jeu de cartes actuel ou null si aucun n'est charg√©
   */
  getCurrentDeck() {
    if (!this.currentDeckId) {
      return null;
    }
    return this.decks[this.currentDeckId];
  }
  
  /**
   * Obtient la signification d'un arcane majeur √† l'endroit
   * @param {number} cardNumber - Num√©ro de la carte
   * @return {string} La signification
   */
  getMajorUprightMeaning(cardNumber) {
    const meanings = {
      0: "Libert√©, spiritualit√©, potentiel inexploit√©",
      1: "Habilet√©, dext√©rit√©, action, cr√©ativit√©",
      2: "Intuition, sagesse int√©rieure, connaissance secr√®te",
      3: "Abondance, f√©minit√©, cr√©ativit√©, nature",
      4: "Autorit√©, structure, contr√¥le, leadership",
      5: "Spiritualit√©, croyance, tradition, conformit√©",
      6: "Amour, choix, attraction, √©quilibre",
      7: "D√©termination, contr√¥le, succ√®s, action",
      8: "√âquit√©, v√©rit√©, loi, √©quilibre",
      9: "Introspection, recherche, solitude, guidance",
      10: "Chance, karma, destin, tournants de vie",
      11: "Courage, persuasion, influence, √©nergie",
      12: "Sacrifice, perspective, suspension, l√¢cher-prise",
      13: "Transformation, transition, changement, lib√©ration",
      14: "Mod√©ration, √©quilibre, patience, harmonie",
      15: "Ombres, mat√©rialisme, attachements, illusions",
      16: "Bouleversement soudain, chaos, r√©v√©lation, √©veil",
      17: "Espoir, inspiration, renouveau, spiritualit√©",
      18: "Illusion, peurs, anxi√©t√©, confusion",
      19: "Succ√®s, joie, vitalit√©, confiance",
      20: "√âveil, r√©novation, jugement, absolution",
      21: "Accomplissement, int√©gration, voyage, compl√©tude"
    };
    
    return meanings[cardNumber] || "Signification inconnue";
  }
  
  /**
   * Obtient la signification d'un arcane majeur renvers√©
   * @param {number} cardNumber - Num√©ro de la carte
   * @return {string} La signification
   */
  getMajorReversedMeaning(cardNumber) {
    const meanings = {
      0: "Errance, imprudence, risques insens√©s",
      1: "Manque de confiance, talents inexploit√©s, tromperie",
      2: "Secrets cach√©s, savoir cach√©, besoin d'√©couter son intuition",
      3: "D√©pendance, blocage cr√©atif, probl√®mes domestiques",
      4: "Domination, rigidit√©, inflexibilit√©, contr√¥le excessif",
      5: "R√©bellion, subversion, nouvelles m√©thodes, non-conventionalit√©",
      6: "D√©s√©quilibre, discorde, disharmonie, mauvais choix",
      7: "Manque de direction, agression, √©chec, d√©faite",
      8: "Injustice, malhonn√™tet√©, manque d'objectivit√©",
      9: "Isolement, repli sur soi, parano√Øa, solitude excessive",
      10: "Revers de fortune, bouleversements, r√©sistance au changement",
      11: "Doute de soi, faiblesse, manque de d√©termination",
      12: "R√©sistance, stagnation, ind√©cision, retard",
      13: "R√©sistance au changement, stagnation, in√©vitabilit√©",
      14: "D√©s√©quilibre, exc√®s, auto-restriction, d√©salignement",
      15: "Lib√©ration, ind√©pendance, affronter ses peurs",
      16: "√âviter le d√©sastre, retarder l'in√©vitable, r√©sistance au changement",
      17: "D√©sespoir, pessimisme, manque de foi, d√©couragement",
      18: "Confusion, peur, malentendus, m√©connaissance",
      19: "Blocage, d√©pression, malentendus, √©gocentrisme",
      20: "Doute de soi, auto-critique, peur du changement",
      21: "Incomplet, stagnation, manque d'accomplissement, voyage d√©s√©quilibr√©"
    };
    
    return meanings[cardNumber] || "Signification inconnue";
  }
  
  /**
   * Obtient la signification d'un arcane mineur √† l'endroit
   * @param {string} suit - Couleur de la carte
   * @param {number} number - Num√©ro de la carte
   * @return {string} La signification
   */
  getMinorUprightMeaning(suit, number) {
    // Significations simplifi√©es pour l'exemple
    const baseMeanings = {
      cups: {
        1: "Cr√©ativit√©, intuition, d√©veloppement √©motionnel",
        2: "Union, attraction, rapport, consid√©ration",
        3: "C√©l√©bration, amiti√©, collaboration, communaut√©",
        4: "M√©ditation, contemplation, apathie, r√©√©valuation",
        5: "Regret, d√©ception, d√©senchantement, chagrin",
        6: "Souvenirs, nostalgie, bonheur, bienveillance",
        7: "Fantasmer, illusion, enchantement, espoirs",
        8: "D√©sertion, retrait, fuite, fatalit√©",
        9: "Contentement, satisfaction physique, bien-√™tre",
        10: "Bonheur harmonieux, alignement, accomplissement",
        11: "Cr√©ativit√© en effervescence, intelligence, intuition",
        12: "Engagement, intensit√©, t√©nacit√©",
        13: "Compassion, calme, amour",
        14: "Stabilit√© √©motionnelle, contr√¥le, compassion"
      },
      pentacles: {
        1: "Opportunit√©, prosp√©rit√©, nouveaux revenus",
        2: "√âquilibre, adaptation, ajustement, √©quilibre travail-vie",
        3: "Travail d'√©quipe, collaboration, accomplissement",
        4: "S√©curit√©, stabilit√©, conservation, avidit√©",
        5: "Difficult√©s, adversit√©, pauvret√©, perte, isolement",
        6: "G√©n√©rosit√©, charit√©, donner, prosp√©rit√©",
        7: "R√©compense, pers√©v√©rance, persistance, entretien",
        8: "Diligence, savoir-faire, apprentissage, comp√©tences",
        9: "Luxe, ind√©pendance, autosuffisance, abondance",
        10: "Richesse, prosp√©rit√©, s√©curit√©, h√©ritage",
        11: "Opportunit√©, potentiel, nouvelles comp√©tences",
        12: "Fiabilit√©, efficacit√©, productivit√©",
        13: "Abondance, partage, hospitalit√©, ravissement",
        14: "Richesse, s√©curit√©, business, leadership"
      },
      swords: {
        1: "Clart√©, force mentale, v√©rit√©, triomphe",
        2: "D√©cision, ind√©cision, stalemate, choix",
        3: "Chagrin, r√©cup√©ration, expression, l√¢cher-prise",
        4: "Contemplation, r√©cup√©ration, passivit√©, repos",
        5: "Conflit, d√©saccord, comp√©tition, d√©faite",
        6: "Transition, laisser aller, partir, voyage",
        7: "Tricherie, tactiques, strat√©gie, prudence",
        8: "Restriction, limitation, emprisonnement, isolement",
        9: "Anxi√©t√©, peur, inqui√©tude, confusion",
        10: "D√©faite, douleur, trahison, crise",
        11: "Intelligence, esprit, communication, d√©sillusion",
        12: "Action, impulsivit√©, d√©fensivit√©",
        13: "Clart√©, intelligence, gr√¢ce, connaissance",
        14: "Clart√©, autorit√©, pouvoir, v√©rit√©"
      },
      wands: {
        1: "Inspiration, cr√©ation, pouvoir, potentiel",
        2: "Planification, organisation, progression, d√©cision",
        3: "Pr√©voyance, entreprise, exploration, anticipation",
        4: "C√©l√©bration, harmonie, communaut√©, ach√®vement",
        5: "Conflit, discorde, comp√©tition, tension",
        6: "Victoire, succ√®s, progr√®s, ascension",
        7: "D√©fense, pers√©v√©rance, maintien, courage",
        8: "Action, mouvement, progr√®s, rapidit√©",
        9: "R√©silience, courage, pers√©v√©rance, test",
        10: "Oppression, restriction, lourdeur, √©puisement",
        11: "Cr√©ativit√©, confiance, avantage, sp√©culation",
        12: "Passion, r√©v√©lation, aventure",
        13: "Clart√©, vitalit√©, motivation, inspiration",
        14: "Vision, leadership, honneur, notori√©t√©"
      }
    };
    
    return baseMeanings[suit]?.[number] || "Signification inconnue";
  }
  
  /**
   * Obtient la signification d'un arcane mineur renvers√©
   * @param {string} suit - Couleur de la carte
   * @param {number} number - Num√©ro de la carte
   * @return {string} La signification
   */
  getMinorReversedMeaning(suit, number) {
    // Significations simplifi√©es pour l'exemple
    const baseMeanings = {
      cups: {
        1: "Blocage √©motionnel, cr√©ativit√© bloqu√©e, intuition faible",
        2: "Disharmonie, d√©s√©quilibre, alignement perdu",
        3: "Surindulgence, dispersement, exc√®s, d√©ception",
        4: "Ennui, stagnation, insatisfaction, apathie",
        5: "Acceptation, pardon, avancer, apprendre",
        6: "S'accrocher au pass√©, avancer, am√©lioration, perfectionnisme",
        7: "Clart√©, direction, changement d'attention",
        8: "Stagnation, acceptation, progression",
        9: "Satisfaction mat√©rielle, luxe, recherche du bonheur",
        10: "Discorde, disharmonie, perturbation, conflit",
        11: "Cr√©ativit√© bloqu√©e, sensibilit√©, ins√©curit√©",
        12: "Ind√©cision, apathie, d√©pression",
        13: "Martyre, intransigeance, n√©gativit√©",
        14: "Contr√¥le, √©motionnalit√©, blocage, manipulation"
      },
      pentacles: {
        1: "Opportunit√© perdue, r√©compense retard√©e, manque de planification",
        2: "D√©s√©quilibre, encombrement, perte de priorisation",
        3: "Manque de collaboration, d√©sorganisation, m√©sentente",
        4: "Avidit√©, stagnation, blocage, passivit√©",
        5: "R√©cup√©ration, croissance, changement de situation",
        6: "√âgo√Øsme, autodestruction, charit√© mal orient√©e",
        7: "Procastination, manque de r√©compense, impatience",
        8: "Manque d'int√©r√™t, inexp√©rience, oisivet√©",
        9: "Retard financier, imperfection, ind√©pendance",
        10: "Perte financi√®re, probl√®mes familiaux, d√©sorganisation",
        11: "Opportunit√©s manqu√©es, immaturit√©, indiscipline",
        12: "Paresse, inutilit√©, improductivit√©",
        13: "St√©rilit√©, ins√©curit√©, cod√©pendance",
        14: "Corruption, s√©curit√© excessive, contr√¥le excessif"
      },
      swords: {
        1: "Pens√©e confuse, perte de force, chaos, destruction",
        2: "Ind√©cision, confusion, information, pression",
        3: "R√©cup√©ration, pardon, avancer",
        4: "Red√©marrage, activit√©, vigilance, changement",
        5: "R√©conciliation, m√©diation, d√©tente",
        6: "Retards, r√©sistance, persistance",
        7: "Prudence, conscience, pr√©paration",
        8: "Lib√©ration, nouvelle perspective, changement",
        9: "Doute, peur, anxi√©t√©, libert√©",
        10: "R√©cup√©ration, r√©tablissement, renaissance",
        11: "Cruaut√©, abus, manipulation, vengeance",
        12: "Manque de direction, inconstance, confusion",
        13: "Manipulation, intelligence mal dirig√©e, duret√©",
        14: "Tyrannie, manipulation, mauvaise communication"
      },
      wands: {
        1: "Manque d'√©nergie, manque d'inspiration, distraction",
        2: "Ind√©cision, manque de planification, distraction",
        3: "D√©lais, frustration, obstacles, stagnation",
        4: "Ins√©curit√©, crise de croissance, manque d'harmonie",
        5: "R√©solution, paix, fin du conflit, acceptation",
        6: "Retard, √©chec, mauvais alignement",
        7: "Cession, peur, capitulation, intimidation",
        8: "Distractions, dispersion, manque de coh√©rence",
        9: "Faiblesse, retards, l√¢chet√©, r√©cup√©ration",
        10: "Lib√©ration, rester fort, pers√©v√©rance",
        11: "Procrastination, manque de confiance, h√©sitation",
        12: "Impulsivit√©, t√©m√©rit√©, irrationalit√©",
        13: "Rigidit√©, √©chec cr√©atif, cruaut√©",
        14: "Impulsivit√©, intol√©rance, domination"
      }
    };
    
    return baseMeanings[suit]?.[number] || "Signification inconnue";
  }

  /**
   * G√©n√®re le nom de fichier pour une carte
   * @param {string} deckId - Identifiant du jeu
   * @param {number} index - Index de la carte
   * @returns {string} Nom du fichier
   */
  generateFileName(deckId, index) {
    const deckInfo = this.availableDecks[deckId];
    if (!deckInfo) {
      throw new Error(`Jeu non trouv√©: ${deckId}`);
    }

    const extension = deckId === 'set02' ? 'jpg' : 'png';
    const paddedIndex = String(index).padStart(2, '0');
    const fileName = `${paddedIndex}_${this.getMajorCardName(index, deckId)}.${extension}`;
    
    console.log(`üìÑ Nom de fichier g√©n√©r√© pour ${deckId}: ${fileName}`);
    return fileName;
  }
}

export default DeckService; 