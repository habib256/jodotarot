/**
 * Service pour charger et g√©rer les diff√©rents jeux de cartes
 */
import Deck from '../models/cards/Deck.js';
import { TarotCard, ARCANE_TYPES, MINOR_SUITS, MINOR_RANKS, cardSetConfigs } from '../models/cards/index.js';
import { getTranslation } from '../translations/index.js';

class DeckService {
  constructor() {
    this.decks = {}; // Cache des jeux charg√©s
    this.currentDeckId = null;
  }
  
  /**
   * V√©rifie si un jeu de cartes est d√©j√† charg√©
   * @param {string} deckId - Identifiant du jeu
   * @returns {boolean} True si le jeu est charg√©
   */
  isDeckLoaded(deckId) {
    return !!this.decks[deckId];
  }
  
  /**
   * Obtient la liste des jeux disponibles
   * @returns {Array} Liste des jeux disponibles
   */
  getAvailableDecks() {
    return Object.values(cardSetConfigs);
  }
  
  /**
   * Charge un jeu de cartes sp√©cifique
   * @param {string} deckId - Identifiant du jeu √† charger
   * @returns {Promise<Deck>} Le jeu de cartes charg√©
   */
  async loadDeck(deckId) {
    console.log(`üîÑ D√©but du chargement du jeu ${deckId}`);
    
    // Vider le cache si on change de jeu
    if (this.currentDeckId && this.currentDeckId !== deckId) {
      console.log(`üóëÔ∏è Vidage du cache du jeu ${this.currentDeckId}`);
      delete this.decks[this.currentDeckId];
    }

    const deckInfo = cardSetConfigs[deckId];
    if (!deckInfo) {
      console.error(`‚ùå Jeu ${deckId} non trouv√© dans les jeux disponibles`);
      throw new Error(`Jeu ${deckId} non trouv√©`);
    }

    console.log(`üìä Informations sur le jeu ${deckId}:`, deckInfo);

    try {
      // Charger les cartes majeures
      const majorCards = await this.fetchMajorCards(deckId);
      console.log(`üé¥ Cartes majeures charg√©es pour ${deckId}:`, majorCards);
      
      // Cr√©er le jeu
      const deck = new Deck(deckId, majorCards);
      this.decks[deckId] = deck;
      this.currentDeckId = deckId;

      // V√©rifier que toutes les images sont accessibles
      console.log(`üîç V√©rification des images pour le jeu ${deckId}...`);
      for (const card of majorCards) {
        try {
          console.log(`üñºÔ∏è Tentative de chargement de l'image: ${card.image}`);
          const response = await fetch(card.image);
          if (!response.ok) {
            throw new Error(`Image non trouv√©e: ${card.image}`);
          }
          console.log(`‚úÖ Image charg√©e avec succ√®s: ${card.image}`);
        } catch (error) {
          console.error(`‚ùå Erreur lors du chargement de l'image ${card.image}:`, error);
          throw new Error(`Impossible de charger l'image de la carte ${card.name}`);
        }
      }

      console.log(`‚úÖ Jeu ${deckId} charg√© avec succ√®s`);
      return deck;
    } catch (error) {
      console.error(`‚ùå Erreur lors du chargement du jeu ${deckId}:`, error);
      throw new Error(`√âchec du chargement du jeu ${deckId}: ${error.message}`);
    }
  }
  
  /**
   * R√©cup√®re les cartes majeures pour un jeu donn√©
   * @param {string} deckId - L'identifiant du jeu
   * @returns {Promise<TarotCard[]>} Les cartes majeures
   */
  async fetchMajorCards(deckId) {
    const config = cardSetConfigs[deckId];
    if (!config) {
      throw new Error(`Jeu non trouv√©: ${deckId}`);
    }

    const cards = [];
    for (let i = 0; i <= config.majorCount; i++) {
      const cardName = config.cardNames[i];
      const fileName = `${String(i).padStart(2, '0')}_${cardName}.${config.extension}`;
      const imagePath = `${config.path}/${fileName}`;
      
      cards.push(new TarotCard(
        `M${String(i).padStart(2, '0')}`,
        cardName,
        imagePath
      ));
    }

    return cards;
  }
  
  /**
   * Obtient le jeu de cartes actuellement s√©lectionn√©
   * @return {Deck|null} Le jeu de cartes actuel ou null si aucun n'est charg√©
   */
  getCurrentDeck() {
    if (!this.currentDeckId) {
      return null;
    }
    return this.decks[this.currentDeckId];
  }
  
  /**
   * Obtient la signification d'un arcane majeur √† l'endroit
   * @param {number} cardNumber - Num√©ro de la carte
   * @return {string} La signification
   */
  getMajorUprightMeaning(cardNumber) {
    const meanings = {
      0: "Libert√©, spiritualit√©, potentiel inexploit√©",
      1: "Habilet√©, dext√©rit√©, action, cr√©ativit√©",
      2: "Intuition, sagesse int√©rieure, connaissance secr√®te",
      3: "Abondance, f√©minit√©, cr√©ativit√©, nature",
      4: "Autorit√©, structure, contr√¥le, leadership",
      5: "Spiritualit√©, croyance, tradition, conformit√©",
      6: "Amour, choix, attraction, √©quilibre",
      7: "D√©termination, contr√¥le, succ√®s, action",
      8: "√âquit√©, v√©rit√©, loi, √©quilibre",
      9: "Introspection, recherche, solitude, guidance",
      10: "Chance, karma, destin, tournants de vie",
      11: "Courage, persuasion, influence, √©nergie",
      12: "Sacrifice, perspective, suspension, l√¢cher-prise",
      13: "Transformation, transition, changement, lib√©ration",
      14: "Mod√©ration, √©quilibre, patience, harmonie",
      15: "Ombres, mat√©rialisme, attachements, illusions",
      16: "Bouleversement soudain, chaos, r√©v√©lation, √©veil",
      17: "Espoir, inspiration, renouveau, spiritualit√©",
      18: "Illusion, peurs, anxi√©t√©, confusion",
      19: "Succ√®s, joie, vitalit√©, confiance",
      20: "√âveil, r√©novation, jugement, absolution",
      21: "Accomplissement, int√©gration, voyage, compl√©tude"
    };
    
    return meanings[cardNumber] || "Signification inconnue";
  }
  
  /**
   * Obtient la signification d'un arcane majeur renvers√©
   * @param {number} cardNumber - Num√©ro de la carte
   * @return {string} La signification
   */
  getMajorReversedMeaning(cardNumber) {
    const meanings = {
      0: "Errance, imprudence, risques insens√©s",
      1: "Manque de confiance, talents inexploit√©s, tromperie",
      2: "Secrets cach√©s, savoir cach√©, besoin d'√©couter son intuition",
      3: "D√©pendance, blocage cr√©atif, probl√®mes domestiques",
      4: "Domination, rigidit√©, inflexibilit√©, contr√¥le excessif",
      5: "R√©bellion, subversion, nouvelles m√©thodes, non-conventionalit√©",
      6: "D√©s√©quilibre, discorde, disharmonie, mauvais choix",
      7: "Manque de direction, agression, √©chec, d√©faite",
      8: "Injustice, malhonn√™tet√©, manque d'objectivit√©",
      9: "Isolement, repli sur soi, parano√Øa, solitude excessive",
      10: "Revers de fortune, bouleversements, r√©sistance au changement",
      11: "Doute de soi, faiblesse, manque de d√©termination",
      12: "R√©sistance, stagnation, ind√©cision, retard",
      13: "R√©sistance au changement, stagnation, in√©vitabilit√©",
      14: "D√©s√©quilibre, exc√®s, auto-restriction, d√©salignement",
      15: "Lib√©ration, ind√©pendance, affronter ses peurs",
      16: "√âviter le d√©sastre, retarder l'in√©vitable, r√©sistance au changement",
      17: "D√©sespoir, pessimisme, manque de foi, d√©couragement",
      18: "Confusion, peur, malentendus, m√©connaissance",
      19: "Blocage, d√©pression, malentendus, √©gocentrisme",
      20: "√âveil, r√©novation, jugement, absolution",
      21: "Incomplet, stagnation, manque d'accomplissement, voyage d√©s√©quilibr√©"
    };
    
    return meanings[cardNumber] || "Signification inconnue";
  }
}

export default DeckService; 