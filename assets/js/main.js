/**
 * Point d'entr√©e principal de l'application JodoTarot
 * Initialise et coordonne tous les composants
 */
import StateManager from './utils/StateManager.js';
import AppController from './controllers/AppController.js';
import ReadingController from './controllers/ReadingController.js';
import ConfigController from './controllers/ConfigController.js';
import AIService from './services/AIService.js';
import DeckService from './services/DeckService.js';
import UIService from './services/UIService.js';

// Import dynamique des personas au lieu d'imports individuels
import { getAllPersonas } from './models/personas/index.js';

// Import des tirages
import CrossSpread from './models/spreads/CrossSpread.js';
import HorseshoeSpread from './models/spreads/HorseshoeSpread.js';
import LoveSpread from './models/spreads/LoveSpread.js';
import CelticCrossSpread from './models/spreads/CelticCrossSpread.js';

// Instances des services et contr√¥leurs
let stateManager;
let aiService;
let deckService;
let uiService;
let appController;
let readingController;
let configController;

// Initialisation des registres
window.registries = {
  personas: {},
  spreads: {}
};

// Fonction d'enregistrement des personas
function registerPersona(key, PersonaClass) {
  window.registries.personas[key] = PersonaClass;
}

// Fonction d'enregistrement des tirages
function registerSpread(key, SpreadClass) {
  window.registries.spreads[key] = SpreadClass;
}

// Fonction d'initialisation principale
document.addEventListener('DOMContentLoaded', async () => {
  console.log('Initialisation de JodoTarot...');
  
  try {
    // Enregistrer les tirages
    registerSpread('cross', CrossSpread);
    registerSpread('horseshoe', HorseshoeSpread);
    registerSpread('love', LoveSpread);
    registerSpread('celticCross', CelticCrossSpread);
    
    // Enregistrer tous les personas automatiquement
    const allPersonas = await getAllPersonas();
    for (const [key, PersonaClass] of Object.entries(allPersonas)) {
      registerPersona(key, PersonaClass);
    }
    
    // Cr√©er et initialiser le gestionnaire d'√©tat en premier
    stateManager = new StateManager();
    console.log('üîÑ Initialisation du gestionnaire d\'√©tat...');
    
    // Initialiser le StateManager de mani√®re asynchrone
    // et attendre que l'√©tat soit compl√®tement charg√©
    await stateManager.initialize();
    console.log('‚úÖ √âtat charg√© avec succ√®s');
    
    // D√©finir le jeu de cartes par d√©faut si non d√©fini
    // Utilisez cardSet au lieu de deckId pour √™tre coh√©rent avec le sch√©ma d'√©tat mis √† jour
    stateManager.setState({ cardSet: 'set01' });
    
    // Cr√©er les services apr√®s l'initialisation de l'√©tat
    aiService = new AIService(stateManager);
    deckService = new DeckService(stateManager);
    uiService = new UIService();
    
    // Cr√©er et initialiser les contr√¥leurs
    configController = new ConfigController(stateManager, aiService, uiService);
    readingController = new ReadingController(stateManager, deckService, aiService);
    appController = new AppController(stateManager, configController, readingController);
    
    // Charger les ressources initiales
    await loadInitialResources();
    
    // Configurer les √©couteurs d'√©v√©nements
    setupEventListeners();
    
    console.log('JodoTarot initialis√© avec succ√®s!');
  } catch (error) {
    console.error('Erreur lors de l\'initialisation de JodoTarot:', error);
    showErrorMessage('Une erreur est survenue lors de l\'initialisation de l\'application');
  }
});

/**
 * Charge les ressources initiales
 */
async function loadInitialResources() {
  try {
    // D√©finir la langue fran√ßaise par d√©faut
    stateManager.setState({ language: 'fr' });
    
    // Forcer la s√©lection du tirage en croix au d√©marrage
    document.getElementById('spread-type').value = 'cross';
    stateManager.setState({ spreadType: 'cross' });
    
    // Charger le jeu de cartes par d√©faut (set01)
    try {
      // V√©rifier si le jeu est d√©j√† charg√© pour √©viter les doublons
      if (!deckService.isDeckLoaded('set01')) {
        await deckService.loadDeck('set01');
        console.log("‚úÖ Jeu de cartes par d√©faut (set01) charg√© avec succ√®s");
      }
      stateManager.setState({ cardSet: 'set01' });
    } catch (deckError) {
      console.error("‚ùå Erreur lors du chargement du jeu de cartes par d√©faut:", deckError);
      showErrorMessage('Erreur lors du chargement du jeu de cartes');
    }
    
    // Mettre √† jour le titre de l'application
    configController.updateAppTitle();
    
    // Charger les mod√®les d'IA disponibles
    const ollamaModelsLoaded = await configController.loadOllamaModels();
    
    // Si aucun mod√®le Ollama n'est disponible, v√©rifier OpenAI
    if (!ollamaModelsLoaded) {
      console.log("‚ö†Ô∏è Aucun mod√®le Ollama disponible, v√©rification des options alternatives");
      
      // V√©rifier si OpenAI est configur√©
      if (configController.aiService.apiKey && 
          configController.aiService.apiKey !== "YOUR API KEY") {
        console.log("‚û°Ô∏è Utilisation d'OpenAI comme mod√®le par d√©faut");
        document.getElementById('ia-model').value = 'openai/gpt-3.5-turbo';
      } else {
        // Ni Ollama ni OpenAI ne sont disponibles, utiliser le mode Prompt
        console.log("‚û°Ô∏è Ni Ollama ni OpenAI ne sont disponibles, utilisation du mode Prompt");
        configController.selectPromptMode();
      }
    }
  } catch (error) {
    console.error('Erreur lors du chargement des ressources:', error);
    throw error;
  }
}

/**
 * Configure les √©couteurs d'√©v√©nements globaux
 */
function setupEventListeners() {
  // √âcouteur pour les erreurs globales
  window.addEventListener('error', (event) => {
    console.error('Erreur globale:', event.error);
    showErrorMessage(`Une erreur s'est produite: ${event.error.message}`);
  });
  
  // √âcouteur pour les rejets de promesses non g√©r√©s
  window.addEventListener('unhandledrejection', (event) => {
    console.error('Promesse rejet√©e non g√©r√©e:', event.reason);
    showErrorMessage(`Erreur asynchrone: ${event.reason}`);
  });
  
  // Ajouter l'√©couteur pour le bouton de copie
  const copyButton = document.getElementById('copy-button');
  if (copyButton) {
    console.log('Initialisation du bouton de copie');
    copyButton.addEventListener('click', handleCopyButtonClick);
  } else {
    console.error('Bouton de copie non trouv√© dans le DOM');
  }
}

/**
 * G√®re le clic sur le bouton de copie
 * Copie le contenu de l'interpr√©tation ou du prompt dans le presse-papier
 */
async function handleCopyButtonClick() {
  const copyButton = document.getElementById('copy-button');
  const responseContent = document.querySelector('.response-content');
  
  if (!responseContent) return;
  
  try {
    // R√©cup√©rer le texte √† copier
    let textToCopy = '';
    
    // Si nous sommes en mode prompt (sans IA), copier le prompt
    const currentModel = stateManager.getState().iaModel;
    if (currentModel === 'prompt') {
      // Si le prompt est affich√©, le copier
      textToCopy = responseContent.textContent;
    } else {
      // Sinon, copier l'interpr√©tation
      textToCopy = responseContent.textContent;
    }
    
    // Copier dans le presse-papier
    await navigator.clipboard.writeText(textToCopy);
    
    // Afficher un retour visuel de succ√®s
    const originalText = copyButton.querySelector('span').textContent;
    copyButton.classList.add('success');
    copyButton.querySelector('span').textContent = 'Copi√© !';
    
    // Revenir √† l'√©tat normal apr√®s un d√©lai
    setTimeout(() => {
      copyButton.classList.remove('success');
      copyButton.querySelector('span').textContent = originalText;
    }, 2000);
    
  } catch (error) {
    console.error('Erreur lors de la copie :', error);
    // Afficher un message d'erreur en cas d'√©chec
    copyButton.querySelector('span').textContent = 'Erreur !';
    setTimeout(() => {
      copyButton.querySelector('span').textContent = 'Copier';
    }, 2000);
  }
}

/**
 * Cr√©e une instance de tirage
 * @param {string} key - Identifiant du type de tirage
 * @param {HTMLElement} container - Conteneur DOM
 * @param {string} language - Code de langue
 * @return {BaseSpread} Instance de la disposition
 */
export function createSpread(key, container, language = 'fr') {
  // V√©rifier si le type de tirage est valide
  if (!window.registries.spreads || !window.registries.spreads[key]) {
    console.error(`Type de tirage non trouv√©: ${key}`);
    // Utiliser un type de tirage par d√©faut (croix)
    key = 'cross';
    // Si m√™me le type par d√©faut n'existe pas, lancer une erreur
    if (!window.registries.spreads[key]) {
      throw new Error(`Aucun type de tirage disponible`);
    }
  }
  
  try {
    const SpreadClass = window.registries.spreads[key];
    return new SpreadClass(container, language);
  } catch (error) {
    console.error(`Erreur lors de la cr√©ation du tirage ${key}:`, error);
    throw new Error(`Impossible de cr√©er le tirage: ${error.message}`);
  }
}

/**
 * Cr√©e une instance de persona
 * @param {string} key - Cl√© du persona
 * @param {string} language - Code de langue
 * @return {BasePersona} Instance du persona
 */
export function createPersona(key, language = 'fr') {
  // V√©rifier si le persona est valide
  if (!window.registries.personas || !window.registries.personas[key]) {
    console.error(`Persona non trouv√©: ${key}`);
    // Utiliser un persona par d√©faut (tarologue)
    key = 'tarologue';
    // Si m√™me le persona par d√©faut n'existe pas, lancer une erreur
    if (!window.registries.personas[key]) {
      throw new Error(`Aucun persona disponible`);
    }
  }
  
  try {
    const PersonaClass = window.registries.personas[key];
    return new PersonaClass(language);
  } catch (error) {
    console.error(`Erreur lors de la cr√©ation du persona ${key}:`, error);
    throw new Error(`Impossible de cr√©er le persona: ${error.message}`);
  }
}

/**
 * Affiche un message d'erreur
 * @param {string} message - Message d'erreur √† afficher
 */
function showErrorMessage(message) {
  uiService?.showError(message) || console.error(message);
} 